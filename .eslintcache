[{"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\index.tsx":"1","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\reportWebVitals.ts":"2","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\app\\store.ts":"3","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\app\\App.tsx":"4","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\app\\app-reducer.ts":"5","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\todolists-reducer.ts":"6","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\Login\\auth-reducer.ts":"7","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\tasks-reducer.ts":"8","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\Login\\Login.tsx":"9","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\TodolistsList.tsx":"10","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"11","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\api\\todolists-api.ts":"12","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\utils\\error-utils.ts":"13","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"14","D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"15","D:\\IT0805\\delete\\src\\index.tsx":"16","D:\\IT0805\\delete\\src\\reportWebVitals.ts":"17","D:\\IT0805\\delete\\src\\app\\store.ts":"18","D:\\IT0805\\delete\\src\\app\\App.tsx":"19","D:\\IT0805\\delete\\src\\app\\app-reducer.ts":"20","D:\\IT0805\\delete\\src\\features\\TodolistsList\\todolists-reducer.ts":"21","D:\\IT0805\\delete\\src\\features\\TodolistsList\\tasks-reducer.ts":"22","D:\\IT0805\\delete\\src\\features\\Login\\auth-reducer.ts":"23","D:\\IT0805\\delete\\src\\features\\TodolistsList\\TodolistsList.tsx":"24","D:\\IT0805\\delete\\src\\features\\Login\\Login.tsx":"25","D:\\IT0805\\delete\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"26","D:\\IT0805\\delete\\src\\api\\todolists-api.ts":"27","D:\\IT0805\\delete\\src\\utils\\error-utils.ts":"28","D:\\IT0805\\delete\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"29","D:\\IT0805\\delete\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"30","D:\\IT0805\\delete\\src\\components\\addItemForm\\AddItemForm.tsx":"31","D:\\IT0805\\delete\\src\\components\\AddItemForm\\AddItemForm.tsx":"32","D:\\IT0805\\delete\\src\\components\\EditableSpan\\EditableSpan.tsx":"33"},{"size":764,"mtime":1635149480176,"results":"34","hashOfConfig":"35"},{"size":440,"mtime":1635149480184,"results":"36","hashOfConfig":"35"},{"size":707,"mtime":1635149480139,"results":"37","hashOfConfig":"35"},{"size":2518,"mtime":1635149480136,"results":"38","hashOfConfig":"35"},{"size":2080,"mtime":1635149480137,"results":"39","hashOfConfig":"35"},{"size":4586,"mtime":1635149480169,"results":"40","hashOfConfig":"35"},{"size":1981,"mtime":1635149480153,"results":"41","hashOfConfig":"35"},{"size":5633,"mtime":1635149480167,"results":"42","hashOfConfig":"35"},{"size":3724,"mtime":1635149480152,"results":"43","hashOfConfig":"35"},{"size":4034,"mtime":1635149480165,"results":"44","hashOfConfig":"35"},{"size":1092,"mtime":1635149480146,"results":"45","hashOfConfig":"35"},{"size":3090,"mtime":1635149480133,"results":"46","hashOfConfig":"35"},{"size":811,"mtime":1635149480189,"results":"47","hashOfConfig":"35"},{"size":4157,"mtime":1635149480162,"results":"48","hashOfConfig":"35"},{"size":1773,"mtime":1635149480159,"results":"49","hashOfConfig":"35"},{"size":764,"mtime":1635149480176,"results":"50","hashOfConfig":"51"},{"size":440,"mtime":1635149480184,"results":"52","hashOfConfig":"51"},{"size":707,"mtime":1635149480139,"results":"53","hashOfConfig":"51"},{"size":2518,"mtime":1635149480136,"results":"54","hashOfConfig":"51"},{"size":2080,"mtime":1635149480137,"results":"55","hashOfConfig":"51"},{"size":4586,"mtime":1635149480169,"results":"56","hashOfConfig":"51"},{"size":5633,"mtime":1635149480167,"results":"57","hashOfConfig":"51"},{"size":1981,"mtime":1635149480153,"results":"58","hashOfConfig":"51"},{"size":4034,"mtime":1635151449870,"results":"59","hashOfConfig":"51"},{"size":3724,"mtime":1635149480152,"results":"60","hashOfConfig":"51"},{"size":1092,"mtime":1635149480146,"results":"61","hashOfConfig":"51"},{"size":3090,"mtime":1635149480133,"results":"62","hashOfConfig":"51"},{"size":811,"mtime":1635149480189,"results":"63","hashOfConfig":"51"},{"size":4157,"mtime":1635151449828,"results":"64","hashOfConfig":"51"},{"size":1773,"mtime":1635149480159,"results":"65","hashOfConfig":"51"},{"size":1595,"mtime":1635149480148,"results":"66","hashOfConfig":"51"},{"size":1595,"mtime":1635149480148,"results":"67","hashOfConfig":"51"},{"size":952,"mtime":1635149480150,"results":"68","hashOfConfig":"51"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dqmbxh",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hloev2",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\index.tsx",[],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\reportWebVitals.ts",[],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\app\\store.ts",[],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\app\\App.tsx",["143"],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\app\\app-reducer.ts",[],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\todolists-reducer.ts",["144"],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\Login\\auth-reducer.ts",[],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\tasks-reducer.ts",["145","146"],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\Login\\Login.tsx",["147"],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\TodolistsList.tsx",["148","149","150","151","152","153","154","155"],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\api\\todolists-api.ts",[],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\utils\\error-utils.ts",[],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["156","157","158","159","160","161"],"D:\\IT0805\\delet\\Todolist\\TodoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["162","163","164"],"D:\\IT0805\\delete\\src\\index.tsx",[],"D:\\IT0805\\delete\\src\\reportWebVitals.ts",[],"D:\\IT0805\\delete\\src\\app\\store.ts",[],"D:\\IT0805\\delete\\src\\app\\App.tsx",["165"],"import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const dispatch = useDispatch()\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <h1 style={{fontSize: '50px', textAlign: 'center'}}>loading...</h1>\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'/404'}\r\n                           render={() => <h1 style={{fontSize: '50px', textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","D:\\IT0805\\delete\\src\\app\\app-reducer.ts",[],"D:\\IT0805\\delete\\src\\features\\TodolistsList\\todolists-reducer.ts",["166"],"import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\r\n","D:\\IT0805\\delete\\src\\features\\TodolistsList\\tasks-reducer.ts",["167","168"],"import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","D:\\IT0805\\delete\\src\\features\\Login\\auth-reducer.ts",[],"D:\\IT0805\\delete\\src\\features\\TodolistsList\\TodolistsList.tsx",["169","170","171","172","173","174","175","176"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    ;\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\IT0805\\delete\\src\\features\\Login\\Login.tsx",["177"],"import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'no password'\r\n            } else if (values.password.length < 4) {\r\n                errors.password = 'password is too long'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm();\r\n        },\r\n    })\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            // name='email'\r\n                            // onChange={formik.handleChange}\r\n                            // value={formik.values.email}\r\n                            // onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","D:\\IT0805\\delete\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\IT0805\\delete\\src\\api\\todolists-api.ts",[],"D:\\IT0805\\delete\\src\\utils\\error-utils.ts",[],"D:\\IT0805\\delete\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["178","179","180","181","182","183"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\IT0805\\delete\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["184","185","186"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\IT0805\\delete\\src\\components\\addItemForm\\AddItemForm.tsx",["187","188","189"],"D:\\IT0805\\delete\\src\\components\\AddItemForm\\AddItemForm.tsx",["190","191","192"],"import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\IT0805\\delete\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"193","severity":1,"message":"194","line":28,"column":8,"nodeType":"195","endLine":28,"endColumn":10,"suggestions":"196"},{"ruleId":"197","severity":1,"message":"198","line":10,"column":45,"nodeType":"199","messageId":"200","endLine":10,"endColumn":47},{"ruleId":"201","severity":1,"message":"202","line":5,"column":9,"nodeType":"203","messageId":"204","endLine":5,"endColumn":22},{"ruleId":"197","severity":1,"message":"198","line":13,"column":94,"nodeType":"199","messageId":"200","endLine":13,"endColumn":96},{"ruleId":"205","severity":1,"message":"206","line":55,"column":29,"nodeType":"207","endLine":56,"endColumn":50},{"ruleId":"193","severity":1,"message":"208","line":36,"column":8,"nodeType":"195","endLine":36,"endColumn":10,"suggestions":"209"},{"ruleId":"193","severity":1,"message":"210","line":41,"column":8,"nodeType":"195","endLine":41,"endColumn":10,"suggestions":"211"},{"ruleId":"193","severity":1,"message":"210","line":46,"column":8,"nodeType":"195","endLine":46,"endColumn":10,"suggestions":"212"},{"ruleId":"193","severity":1,"message":"210","line":51,"column":8,"nodeType":"195","endLine":51,"endColumn":10,"suggestions":"213"},{"ruleId":"193","severity":1,"message":"210","line":56,"column":8,"nodeType":"195","endLine":56,"endColumn":10,"suggestions":"214"},{"ruleId":"193","severity":1,"message":"210","line":61,"column":8,"nodeType":"195","endLine":61,"endColumn":10,"suggestions":"215"},{"ruleId":"193","severity":1,"message":"210","line":66,"column":8,"nodeType":"195","endLine":66,"endColumn":10,"suggestions":"216"},{"ruleId":"193","severity":1,"message":"210","line":71,"column":8,"nodeType":"195","endLine":71,"endColumn":10,"suggestions":"217"},{"ruleId":"193","severity":1,"message":"218","line":34,"column":8,"nodeType":"195","endLine":34,"endColumn":10,"suggestions":"219"},{"ruleId":"193","severity":1,"message":"220","line":38,"column":8,"nodeType":"195","endLine":38,"endColumn":42,"suggestions":"221"},{"ruleId":"193","severity":1,"message":"220","line":45,"column":8,"nodeType":"195","endLine":45,"endColumn":54,"suggestions":"222"},{"ruleId":"193","severity":1,"message":"220","line":47,"column":95,"nodeType":"195","endLine":47,"endColumn":134,"suggestions":"223"},{"ruleId":"193","severity":1,"message":"220","line":48,"column":101,"nodeType":"195","endLine":48,"endColumn":140,"suggestions":"224"},{"ruleId":"193","severity":1,"message":"220","line":49,"column":107,"nodeType":"195","endLine":49,"endColumn":146,"suggestions":"225"},{"ruleId":"193","severity":1,"message":"220","line":15,"column":97,"nodeType":"195","endLine":15,"endColumn":130,"suggestions":"226"},{"ruleId":"193","severity":1,"message":"220","line":20,"column":8,"nodeType":"195","endLine":20,"endColumn":41,"suggestions":"227"},{"ruleId":"193","severity":1,"message":"220","line":24,"column":8,"nodeType":"195","endLine":24,"endColumn":41,"suggestions":"228"},{"ruleId":"193","severity":1,"message":"194","line":28,"column":8,"nodeType":"195","endLine":28,"endColumn":10,"suggestions":"229"},{"ruleId":"197","severity":1,"message":"198","line":10,"column":45,"nodeType":"199","messageId":"200","endLine":10,"endColumn":47},{"ruleId":"201","severity":1,"message":"202","line":5,"column":9,"nodeType":"203","messageId":"204","endLine":5,"endColumn":22},{"ruleId":"197","severity":1,"message":"198","line":13,"column":94,"nodeType":"199","messageId":"200","endLine":13,"endColumn":96},{"ruleId":"193","severity":1,"message":"208","line":36,"column":8,"nodeType":"195","endLine":36,"endColumn":10,"suggestions":"230"},{"ruleId":"193","severity":1,"message":"210","line":41,"column":8,"nodeType":"195","endLine":41,"endColumn":10,"suggestions":"231"},{"ruleId":"193","severity":1,"message":"210","line":46,"column":8,"nodeType":"195","endLine":46,"endColumn":10,"suggestions":"232"},{"ruleId":"193","severity":1,"message":"210","line":51,"column":8,"nodeType":"195","endLine":51,"endColumn":10,"suggestions":"233"},{"ruleId":"193","severity":1,"message":"210","line":56,"column":8,"nodeType":"195","endLine":56,"endColumn":10,"suggestions":"234"},{"ruleId":"193","severity":1,"message":"210","line":61,"column":8,"nodeType":"195","endLine":61,"endColumn":10,"suggestions":"235"},{"ruleId":"193","severity":1,"message":"210","line":66,"column":8,"nodeType":"195","endLine":66,"endColumn":10,"suggestions":"236"},{"ruleId":"193","severity":1,"message":"210","line":71,"column":8,"nodeType":"195","endLine":71,"endColumn":10,"suggestions":"237"},{"ruleId":"205","severity":1,"message":"206","line":55,"column":29,"nodeType":"207","endLine":56,"endColumn":50},{"ruleId":"193","severity":1,"message":"218","line":34,"column":8,"nodeType":"195","endLine":34,"endColumn":10,"suggestions":"238"},{"ruleId":"193","severity":1,"message":"220","line":38,"column":8,"nodeType":"195","endLine":38,"endColumn":42,"suggestions":"239"},{"ruleId":"193","severity":1,"message":"220","line":45,"column":8,"nodeType":"195","endLine":45,"endColumn":54,"suggestions":"240"},{"ruleId":"193","severity":1,"message":"220","line":47,"column":95,"nodeType":"195","endLine":47,"endColumn":134,"suggestions":"241"},{"ruleId":"193","severity":1,"message":"220","line":48,"column":101,"nodeType":"195","endLine":48,"endColumn":140,"suggestions":"242"},{"ruleId":"193","severity":1,"message":"220","line":49,"column":107,"nodeType":"195","endLine":49,"endColumn":146,"suggestions":"243"},{"ruleId":"193","severity":1,"message":"220","line":15,"column":97,"nodeType":"195","endLine":15,"endColumn":130,"suggestions":"244"},{"ruleId":"193","severity":1,"message":"220","line":20,"column":8,"nodeType":"195","endLine":20,"endColumn":41,"suggestions":"245"},{"ruleId":"193","severity":1,"message":"220","line":24,"column":8,"nodeType":"195","endLine":24,"endColumn":41,"suggestions":"246"},{"ruleId":"201","severity":1,"message":"247","line":2,"column":9,"nodeType":"203","messageId":"204","endLine":2,"endColumn":12},{"ruleId":"201","severity":1,"message":"248","line":2,"column":14,"nodeType":"203","messageId":"204","endLine":2,"endColumn":20},{"ruleId":"201","severity":1,"message":"249","line":2,"column":22,"nodeType":"203","messageId":"204","endLine":2,"endColumn":33},{"ruleId":"201","severity":1,"message":"247","line":2,"column":9,"nodeType":"203","messageId":"204","endLine":2,"endColumn":12},{"ruleId":"201","severity":1,"message":"248","line":2,"column":14,"nodeType":"203","messageId":"204","endLine":2,"endColumn":20},{"ruleId":"201","severity":1,"message":"249","line":2,"column":22,"nodeType":"203","messageId":"204","endLine":2,"endColumn":33},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["250"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'setAppErrorAC' is defined but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["251"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["252"],["253"],["254"],["255"],["256"],["257"],["258"],"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["259"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["260"],["261"],["262"],["263"],["264"],["265"],["266"],["267"],["268"],["269"],["270"],["271"],["272"],["273"],["274"],["275"],["276"],["277"],["278"],["279"],["280"],["281"],["282"],["283"],["284"],["285"],"'Box' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.",{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"286","fix":"290"},{"desc":"286","fix":"291"},{"desc":"286","fix":"292"},{"desc":"286","fix":"293"},{"desc":"286","fix":"294"},{"desc":"286","fix":"295"},{"desc":"286","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"299","fix":"301"},{"desc":"299","fix":"302"},{"desc":"299","fix":"303"},{"desc":"299","fix":"304"},{"desc":"299","fix":"305"},{"desc":"299","fix":"306"},{"desc":"299","fix":"307"},{"desc":"286","fix":"308"},{"desc":"288","fix":"309"},{"desc":"286","fix":"310"},{"desc":"286","fix":"311"},{"desc":"286","fix":"312"},{"desc":"286","fix":"313"},{"desc":"286","fix":"314"},{"desc":"286","fix":"315"},{"desc":"286","fix":"316"},{"desc":"297","fix":"317"},{"desc":"299","fix":"318"},{"desc":"299","fix":"319"},{"desc":"299","fix":"320"},{"desc":"299","fix":"321"},{"desc":"299","fix":"322"},{"desc":"299","fix":"323"},{"desc":"299","fix":"324"},{"desc":"299","fix":"325"},"Update the dependencies array to be: [dispatch]",{"range":"326","text":"327"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"328","text":"329"},{"range":"330","text":"327"},{"range":"331","text":"327"},{"range":"332","text":"327"},{"range":"333","text":"327"},{"range":"334","text":"327"},{"range":"335","text":"327"},{"range":"336","text":"327"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"337","text":"338"},"Update the dependencies array to be: [props]",{"range":"339","text":"340"},{"range":"341","text":"340"},{"range":"342","text":"340"},{"range":"343","text":"340"},{"range":"344","text":"340"},{"range":"345","text":"340"},{"range":"346","text":"340"},{"range":"347","text":"340"},{"range":"348","text":"327"},{"range":"349","text":"329"},{"range":"350","text":"327"},{"range":"351","text":"327"},{"range":"352","text":"327"},{"range":"353","text":"327"},{"range":"354","text":"327"},{"range":"355","text":"327"},{"range":"356","text":"327"},{"range":"357","text":"338"},{"range":"358","text":"340"},{"range":"359","text":"340"},{"range":"360","text":"340"},{"range":"361","text":"340"},{"range":"362","text":"340"},{"range":"363","text":"340"},{"range":"364","text":"340"},{"range":"365","text":"340"},[1240,1242],"[dispatch]",[1326,1328],"[demo, dispatch, isLoggedIn]",[1497,1499],[1668,1670],[1873,1875],[2086,2088],[2287,2289],[2434,2436],[2613,2615],[1428,1430],"[demo, dispatch, props.todolist.id]",[1545,1579],"[props]",[1810,1856],[1955,1994],[2097,2136],[2245,2284],[765,798],[1071,1104],[1261,1294],[1240,1242],[1326,1328],[1497,1499],[1668,1670],[1873,1875],[2086,2088],[2287,2289],[2434,2436],[2613,2615],[1428,1430],[1545,1579],[1810,1856],[1955,1994],[2097,2136],[2245,2284],[765,798],[1071,1104],[1261,1294]]